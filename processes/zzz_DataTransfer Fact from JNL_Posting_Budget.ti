#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****


# ================================================================
# Create Source View
# ================================================================

CubeName='JNL_Posting_Budget';

ViewName='zTransposeToMA_Fact';
SubName=ViewName;

if(ViewExists(CubeName,ViewName)=1);
  ViewDestroy(CubeName,ViewName);
endif;

ViewCreate(CubeName,ViewName);

# Period Dimension
  DimName='Period';

if(SubsetExists(DimName,SubName)=1);
  SubsetDeleteAllElements(DimName,SubName);
else;
  SubsetCreate(DimName,SubName);
endif;

if(pYearPeriod@<>'');
  sMDX='DISTINCT({[Period].[Period].[' | pYearPeriod | '],DESCENDANTS([Period].[Period].[' | pYearPeriod | '] , 99 , LEAVES)})';
  SubsetMDXSet(DimName,SubName,sMDX);
  SubsetMDXSet(DimName,SubName,'');
  ViewSubsetAssign(CubeName,ViewName,DimName,SubName);
else;
  pPeriod = CellGetS( 'MA_parameters', 'Current Period', 'Value' );
  SUBSETELEMENTINSERT('Period',SubName,pPeriod,1);
  VIEWSUBSETASSIGN(CubeName,SubName,'Period',SubName);
endif;

# Journal Data dimension
DimName='Journal Data';

if(SubsetExists(DimName,SubName)=1);
  SubsetDeleteAllElements(DimName,SubName);
else;
  SubsetCreate(DimName,SubName);
endif;

SubsetElementInsert(DimName,SubName,'Amount',1);
ViewSubsetAssign(CubeName,ViewName,DimName,SubName);


#View Parameters
ViewExtractSkipCalcsSet( CubeName, ViewName, 1 );
ViewExtractSkipRuleValuesSet( CubeName, ViewName, 0 );
ViewExtractSkipZeroesSet( CubeName, ViewName, 1 );

# Assign Datasource
DataSourceType = 'VIEW';
DatasourceNameForServer = CubeName;
DatasourceNameForClient = CubeName;
DatasourceCubeView = ViewName;


# ================================================================
# Clear Destination - if year (and period) specified, clear out
# ================================================================
CubeName='MA_Fact';
ViewName='zZeroJournalImport';
SubName=ViewName;

CubeSetLogChanges(CubeName,0);

if(ViewExists(CubeName,ViewName)=1);
  ViewDestroy(CubeName,ViewName);
endif;

ViewCreate(CubeName,ViewName);

# Period dimension
DimName='Period';

if(SubsetExists(DimName,SubName)=1);
  SubsetDeleteAllElements(DimName,SubName);
else;
  SubsetCreate(DimName,SubName);
endif;

if(pYearPeriod@<>'');
  sMDX='DISTINCT({[Period].[Period].[' | pYearPeriod | '],DESCENDANTS([Period].[Period].[' | pYearPeriod | '] , 99 , LEAVES)})';
  SubsetMDXSet(DimName,SubName,sMDX);
  SubsetMDXSet(DimName,SubName,'');
  ViewSubsetAssign(CubeName,ViewName,DimName,SubName);
else;
  pPeriod = CellGetS( 'MA_parameters', 'Current Period', 'Value' );
  SUBSETELEMENTINSERT('Period',SubName,pPeriod,1);
  VIEWSUBSETASSIGN(CubeName,SubName,'Period',SubName);
endif;


# Layer Dimension
DimName='MA_Layer';

if(SubsetExists(DimName,SubName)=1);
  SubsetDeleteAllElements(DimName,SubName);
else;
  SubsetCreate(DimName,SubName);
endif;

sMDX='EXCEPT([MA_Layer].[MA_Layer].MEMBERS , {[MA_Layer].[MA_Layer].[Source System]})';
SubsetMDXSet(DimName,SubName,sMDX);
SubsetMDXSet(DimName,SubName,'');

ViewSubsetAssign(CubeName,ViewName,DimName,SubName);


# Scenario Dimension
DimName='MA_Scenario';

if(SubsetExists(DimName,SubName)=1);
  SubsetDeleteAllElements(DimName,SubName);
else;
  SubsetCreate(DimName,SubName);
endif;

SubsetElementInsert( Dimname, Subname, 'Actual', 1 );
ViewSubsetAssign(CubeName,ViewName,DimName,SubName);


# YTD/Month Dimension
DimName='YTD-Month';

if(SubsetExists(DimName,SubName)=1);
  SubsetDeleteAllElements(DimName,SubName);
else;
  SubsetCreate(DimName,SubName);
endif;

SubsetElementInsert( Dimname, Subname, 'Month', 1 );
ViewSubsetAssign(CubeName,ViewName,DimName,SubName);

# Zero out contents of view
ViewZeroOut(CubeName,ViewName);
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

# ================================================================
# Prepare data
# ================================================================

# determine whether we want Local Currency or GBP based on Journal Type
sAccount=CELLGETS('JNL_Posting_Budget',Companies,Period,vJournal,Sequence,'TM1 Account');
sMALayer=CELLGETS('JNL_Posting_Budget',Companies,Period,vJournal,Sequence,'MA_LAYER');
sDept=CELLGETS('JNL_Posting_Budget',Companies,Period,vJournal,Sequence,'MA_DEPT');

 
if(sMALayer@='SOURCE SYSTEM');
  itemskip;
endif;


if(sMALayer@='Local Allocation');
  sMALayer='Local Adjustment MA';  
endif;

#sMALayerParent=ELPAR('MA_Layer',sMALayer,1);
#if(sMALayerParent@='Source LC');
 
if(sMALayer@='Local Adjustment'%sMALayer@='Local Audit');
 nValue=CELLGETN('JNL_Posting_Budget',Companies,Period,vJournal,Sequence,'Value Local Currency');
else;
 nValue=CELLGETN('JNL_Posting_Budget',Companies,Period,vJournal,Sequence,'Value GBP');
endif;

# until mapping is complete
if(DimensionElementExists('TM1 Accounts', sAccount )=0);
  itemskip;
endif;

# ================================================================
# Post data to MA_Fact
# ================================================================
CubeName='MA_Fact';
CELLINCREMENTN(nValue,CubeName,Companies,Period,'Budget',sMALayer,sAccount,'Month');


# ================================================================
# Post data to MA_Fact_Dept_Analysis
# ================================================================
CubeName='MA_Fact_Dept_Analysis';
CELLINCREMENTN(nValue,CubeName,Companies,sDept,Period,'Budget',sMALayer,sAccount,'Month');

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

CubeName='MA_Fact';
CubeSetLogChanges(CubeName,1);

CubeName='MA_Fact_Dept_Analysis';
CubeSetLogChanges(CubeName,1);
#endregion