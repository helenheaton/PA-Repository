#region Prolog

sCube = 'Payroll - Import';
sView = GetProcessName;
sSubset = GetProcessName;
nTemp = 1;

# Define source

sFileLocation = GetProcessErrorFileDirectory;
sFileLocation = Subst(sFileLocation, 1, LONG( sFileLocation )-5)|'Data\Model_Upload';
DatasourceNameForClient = sFileLocation|'\'|pFileName;
DatasourceNameForServer = sFileLocation|'\'|pFileName;
DataSourceType = 'CHARACTERDELIMITED';


# Clear Target

# turn off logging
nCubeLogging = CubeGetLogChanges( sCube );
CubeSetLogChanges( sCube, 0 );

# Create target and clear any data
ViewDestroy( sCube, sView );
ViewCreate( sCube, sView, nTemp ); 

nDim=CubeDimensionCountGet( sCube);
iDim = 1;
While (iDim <= nDim);
  sDim = TABDIM( sCube, iDim ); 
  SubsetDestroy( sDim, sSubset );
  SubsetCreate( sDim, sSubset, nTemp );
  SubsetMDXSet( sDim, sSubset, 'TM1Filterbylevel(TM1SubsetAll(['| sDim |']),0)' );
  SubsetMDXSet( sDim, sSubset, '' );
  ViewSubsetAssign( sCube, sView, sDim, sSubset );
iDim = iDim+1;
End;

sDim = 'Version';
SubsetMDXSet( sDim, sSubset, '{[' | sDim | '].[ ' | pVersion | ']}' );  
SubsetMDXSet( sDim, sSubset, '' );

sDim = 't_Year';
SubsetMDXSet( sDim, sSubset, '{[' | sDim | '].[' | pYear | ']}' );  
SubsetMDXSet( sDim, sSubset, '' );

sDim = 'm_Payroll Data';
SubsetMDXSet( sDim, sSubset, '
{[m_Payroll Data].[m_Payroll Data].[Bank Holiday Enhancements]}' );  
SubsetMDXSet( sDim, sSubset, '' );


ViewZeroOut( sCube, sView );




#endregion
#region Data

IF(vJobCode@='CEO' % vJobCode@='DPD' % vJobCode@='PEN' % vJobCode@='SPR' % vJobCode@='BIT' % vJobCode@='BHO');
  Itemskip;
Endif;

sStaffGrade = Attrs('Job Codes', vJobCode, 'Staff Grade' );

IF(Dimix('Payroll Contract Type', vcontract)=0);
  IF(vContract@='NJC');
    vContract = 'Council';
  Elseif (vContract@='');
    vContract = 'Shaw';
  Else;
    vContract='BUPA';
  Endif;
Endif;  

CellIncrementN( vBHols, 'Payroll - Import', pVersion, pYear, vDept, vContract, sStaffGrade, 'Bank Holiday Enhancements' );
#endregion
#region Epilog
CubeSetLogChanges( sCube, nCubeLogging );
#endregion