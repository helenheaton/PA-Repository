#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# This process transfers data from MA_Staging to MA_Fact which summarises the intercompany and department 
# layers and has minimal calculations for improved report performance
#
# Last updated by Helen Heaton | Budgeting Solutions | 27/04/2023


# ===========================================================================================
# Define cubes and destroy and recreate views
# ===========================================================================================

### Logging parameters ###
sLogDirectory = GetProcessErrorFileDirectory;
 
### Define cubes and views ###
SourceCube='MA_Staging';
TargetCube='MA_Fact';

ViewName='zFact from Staging';
SubName = ViewName;

### Destroy and recreate source view ###

if(ViewExists(SourceCube,ViewName)=1);
  ViewDestroy(SourceCube,ViewName);
endif;
ViewCreate(SourceCube,ViewName);


### Destroy and recreate target views ###
CubeSetLogChanges(TargetCube, 0);

if(ViewExists(TargetCube,ViewName)=1);
  ViewDestroy(TargetCube,ViewName);
endif;
ViewCreate(TargetCube,ViewName);


# ===========================================================================================
# Create Source View
# ===========================================================================================

# Company
DimName = 'Companies';

IF(SUBSETEXISTS(DimName,SubName)=1);
  SubsetDestroy(DimName,SubName);
endif;
SubsetCreate(DimName,SubName);


if(pCompany@<>'');
  SUBSETELEMENTINSERT(DimName,SubName,pCompany,1);
  VIEWSUBSETASSIGN(SourceCube,ViewName,'Companies',SubName);
endif;

if(pCompany@='');
  VIEWSUBSETASSIGN(SourceCube,ViewName,'Companies','All Leaves');
endif;


# Period
DimName = 'Period';

IF(SUBSETEXISTS(DimName,SubName)=1);
  SubsetDestroy(DimName,SubName);
endif;
SubsetCreate(DimName,SubName);

if(pPeriod @='');
  pPeriod = CellGetS( 'MA_parameters', 'Current Period', 'Value' );
  SUBSETELEMENTINSERT(DimName,SubName,pPeriod,1);
  VIEWSUBSETASSIGN(SourceCube, ViewName,DimName,SubName);
Else;  
  sMDX='DISTINCT({[Period].[Period].[' | pPeriod | '],DESCENDANTS([Period].[Period].[' | pPeriod | '] , 99 , LEAVES),[Period].[Period].[Unassigned]})';
  SubsetMDXSet(DimName,SubName,sMDX);
  SubsetMDXSet(DimName,SubName,'');
  ViewSubsetAssign(SourceCube, ViewName,DimName,SubName);
Endif;


### Other dimensions ###
VIEWSUBSETASSIGN(SourceCube,ViewName,'MA_Scenario','All Leaves');
VIEWSUBSETASSIGN(SourceCube,ViewName,'MA_Dept','All Depts');
VIEWSUBSETASSIGN(SourceCube,ViewName,'ICP','All Companies');
VIEWSUBSETASSIGN(SourceCube,ViewName,'MA_Layer','All Leaves');
VIEWSUBSETASSIGN(SourceCube,ViewName,'TM1 Accounts','All Leaves');
VIEWSUBSETASSIGN(SourceCube,ViewName,'MA_FX_Calc','Values');

### Set View Extract parameters ###
VIEWEXTRACTSKIPCALCSSET(SourceCube,ViewName,0);
VIEWEXTRACTSKIPRULEVALUESSET(SourceCube,ViewName,0);
VIEWEXTRACTSKIPZEROESSET(SourceCube,ViewName,1);

### Assign Datasource ###
DataSourceType = 'VIEW';
DataSourceNameForServer = SourceCube;
DataSourceNameForClient = SourceCube;
DataSourceCubeView = ViewName;


# ===========================================================================================
# Clear Destination - MA_Fact
# ===========================================================================================

dimname = 'Companies';
### Company dimension ###
if(pCompany@<>'');
  SUBSETELEMENTINSERT(DimName,SubName,pCompany,1);
  VIEWSUBSETASSIGN(TargetCube,ViewName,'Companies',SubName);
endif;

if(pCompany@='');
  VIEWSUBSETASSIGN(TargetCube,ViewName,'Companies','All Leaves');
endif;


### Period dimension ###
DimName='Period';
VIEWSUBSETASSIGN(TargetCube, ViewName, DimName, SubName);


# Other dimensions
VIEWSUBSETASSIGN(TargetCube,ViewName,'MA_Scenario','All leaves');
VIEWSUBSETASSIGN(TargetCube,ViewName,'MA_Layer','All Leaves');
VIEWSUBSETASSIGN(TargetCube,ViewName,'TM1 Accounts','All Leaves');
VIEWSUBSETASSIGN(TargetCube,ViewName,'YTD-Month','Fact Elements');


VIEWZEROOUT(TargetCube,ViewName);
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

# Use Local currency for Source Layers
IF (elpar('MA_Layer', vLayer ,1) @= 'Source LC');
    If (vFX_Calc @<> 'Local Currency Value');
      Itemskip;
    Endif;
Endif;

# Use GBP for all other layers
IF (elpar('MA_Layer', vLayer ,1) @<> 'Source LC');
    If (vFX_Calc @<> 'GBP Value');
      Itemskip;
    Endif;
Endif;

#Use AGM_Input_Closing for YTD
IF (vMeasures @= 'MA_Closing');
     IF (CellIsUpdateable( TargetCube,vcompanies, vperiod, vScenario, vLayer, vTm1Accounts , 'YTD' )=1);
        CellIncrementN( Value, TargetCube,vcompanies, vperiod, vScenario, vLayer, vTm1Accounts , 'YTD'  );
    endif;
Endif;

#Use MA_Net_Change for Month
IF (vMeasures @= 'MA_Net_Change');
    IF (CellIsUpdateable( TargetCube,vcompanies, vperiod, vScenario, vLayer, vTm1Accounts , 'Month' )=1);
        CellIncrementN( Value, TargetCube,vcompanies, vperiod, vScenario, vLayer, vTm1Accounts , 'Month'  );
    endif;
Endif;

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion