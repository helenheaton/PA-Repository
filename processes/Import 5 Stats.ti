#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# This process imports the Statistical values into MA_Staging for Actuals
# Stats for budgets and forecasts are imported as part of the budget import process
#
# Last updated by Helen Heaton | Budgeting Solutions | 27/04/2023

DatasourceNameForServer = 'model_upload/' | pFileName;

ErrorID = 0;

# ===========================================================================================
# Define cubes and destroy and recreate views
# ===========================================================================================

CubeName1='MA_Staging';

ViewName='zClearforImport - Import 5 Stats';
SubName=ViewName;

# ===========================================================================================
# Create the View to clear out - MA_Fact_Staging
# ===========================================================================================

### Destroy and recreate view ###
if(ViewExists(CubeName1,ViewName)=1);
  ViewDestroy(CubeName1,ViewName);
endif;
ViewCreate(CubeName1,ViewName);

### Company dimension ###
IF(SUBSETEXISTS('Companies',SubName)=0);
   SUBSETCREATE('Companies',SubName);
ELSE; 
   SUBSETDELETEALLELEMENTS('Companies',SubName);
ENDIF;

if(pCompany@='WINGS');
  VIEWSUBSETASSIGN(CubeName1,ViewName,'Companies','All Leaves');
Else;
  SUBSETELEMENTINSERT('Companies',SubName,pCompany,1);
  VIEWSUBSETASSIGN(CubeName1,ViewName,'Companies',SubName);
Endif;

### Period dimension ###
IF(SUBSETEXISTS('Period',SubName)=0);
  SUBSETCREATE('Period',SubName);
ELSE;
  SUBSETDELETEALLELEMENTS('Period',SubName);
ENDIF;

if(pPeriod @='');
  pPeriod = CellGetS( 'MA_parameters', 'Current Period', 'Value' );
  SUBSETELEMENTINSERT('Period',SubName,pPeriod,1);
  VIEWSUBSETASSIGN(CubeName1,SubName,'Period',SubName);
Else;  
  sMDX='DISTINCT({[Period].[Period].[' | pPeriod | '],DESCENDANTS([Period].[Period].[' | pPeriod | '] , 99 , LEAVES)})';
  SubsetMDXSet('Period',SubName,sMDX);
  SubsetMDXSet('Period',SubName,'');

  ViewSubsetAssign(CubeName1,ViewName,'Period',SubName);

Endif;

### Other dimensions ###
VIEWSUBSETASSIGN(CubeName1,SubName,'MA_Scenario','Actual');
VIEWSUBSETASSIGN(CubeName1,SubName,'MA_Dept','All Leaves');
VIEWSUBSETASSIGN(CubeName1,SubName,'ICP','All Leaves');
VIEWSUBSETASSIGN(CubeName1,SubName,'MA_Layer','Statistics');
VIEWSUBSETASSIGN(CubeName1,SubName,'TM1 Accounts','All Leaves');
VIEWSUBSETASSIGN(CubeName1,SubName,'MA_Measures','NetChange');
VIEWSUBSETASSIGN(CubeName1,SubName,'MA_FX_Calc','Values');

### Set View Extract parameters ###
VIEWEXTRACTSKIPCALCSSET(CubeName1,ViewName,1);
VIEWEXTRACTSKIPRULEVALUESSET(CubeName1,ViewName,1);
VIEWEXTRACTSKIPZEROESSET(CubeName1,ViewName,1);

### Clear the view ###
ViewZeroOut( CubeName1, SubName );

# ===========================================================================================
# Clear the errors
# ===========================================================================================

CubeName = 'MA_Errors';

### Destroy and recreate view ###
if(ViewExists(CubeName, ViewName)=1);
  ViewDestroy(CubeName, ViewName);
endif;
ViewCreate(CubeName,ViewName);

VIEWSUBSETASSIGN(CubeName,SubName,'MA_Error_Source','Statistics');
ViewZeroOut( CubeName, SubName );

cellputs('', 'Messages', 'Statistics Import errors', 'MessageText' );
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
vperiod = subst(vPeriod, 1, 6);

# ===========================================================================================
# Skip over data data in the file if it doesn't match the parameters
# ===========================================================================================
if(pCompany@='WINGS');
  IF (SubsetElementExists( 'Companies', 'All leaves', vCompany ) = 0);
      ItemSkip;
  Endif;
Else;
  IF (SubsetElementExists( 'Companies', SubName, vCompany ) = 0);
      ItemSkip;
  Endif;
Endif;


IF (SubsetElementExists( 'Period', SubName, vPeriod ) = 0);
    ItemSkip;
Endif;

# log error if nominal code does not exist in the maping table
if(DimensionElementExists( 'MA Account', vMAAccount ) = 0);
	ErrorType = 'Statistical account does not exist';
    ErrorID = ErrorID + 1;
    ErrorIDString = numbertostring(ErrorID);
    cellputs(vCompany, 'MA_Errors',ErrorIDString,'Company', 'Statistics','Value' );
    cellputs(vPeriod, 'MA_Errors',ErrorIDString,'Period','Statistics','Value' );
    cellputs(ErrorType, 'MA_Errors',ErrorIDString,'Error type','Statistics','Value' );
    cellputs(vMAAccount, 'MA_Errors',ErrorIDString,'Error Value','Statistics','Value' );
    itemskip;
endif;


# log error if department does not exist 
if(DimensionElementExists( 'MA_Dept', vDept ) = 0);
	ErrorType = 'Department does not exist';
    ErrorID = ErrorID + 1;
    ErrorIDString = numbertostring(ErrorID);
    cellputs(vCompany, 'MA_Errors',ErrorIDString,'Company', 'Statistics','Value' );
    cellputs(vPeriod, 'MA_Errors',ErrorIDString,'Period','Statistics','Value' );
    cellputs(ErrorType, 'MA_Errors',ErrorIDString,'Error type','Statistics','Value' );
    cellputs(vDept, 'MA_Errors',ErrorIDString,'Error Value','Statistics','Value' );
    itemskip;
endif;

vtm1account = CellGetS( 'MA_Account_Mapping', attrs('Companies', vCompany, 'Mapping Code'), vMAaccount,'TM1 Account'); 

CellIncrementN( vGBP, CubeName1, 'Actual', vCompany, vDept, vICP, 'Statistics', vPeriod, vtm1account, 'MA_Net_Change', 'GBP Value');
CellIncrementN( vLocal, CubeName1, 'Actual', vCompany, vDept, vICP, 'Statistics', vPeriod, vtm1account, 'MA_Net_Change', 'Local Currency Value');
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
# If errors generate an error message
If(ErrorID > 0);
cellputs(ErrorIDString | ' errors encountered. Please check the error record.', 'Messages', 'Statistics Import errors', 'MessageText' );
Endif;
#endregion